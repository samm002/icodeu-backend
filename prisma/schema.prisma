// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum ProductType {
  single
  multi
}

enum ServiceType {
  single
  multi
}

model User {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  email           String    @unique
  password        String

  name            String?
  address         String?
  phoneNumber     String?
  profilePicture  String?

  refreshToken    String?

  roleId          Int
  role            Role      @relation(fields: [roleId], references: [id])

  blogs Blog[]
  
  @@map("users")
}

model Role {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name        String    @unique

  users User[]
  
  @@map("roles")
}

model PriceDetail {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  name              String
  slug              String?
  description       String?
  price             Float
  discount          Float?
  discountedPrice   Float?
  features          String[]
  images            String[]

  productId         Int?
  product           Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)

  serviceId         Int?
  service           Service?   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("priceDetails")
}

model Product {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  type              ProductType
  name              String
  slug              String?
  description       String?
  price             Float?
  discount          Float?
  discountedPrice   Float?
  features          String[]
  images            String[]

  productPrices     PriceDetail[]

  @@map("products")
}

model Service {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  type              ServiceType
  name              String
  slug              String?
  description       String?
  price             Float?
  discount          Float?
  discountedPrice   Float?
  features          String[]
  images            String[]

  servicePrices     PriceDetail[]

  @@map("services")
}

model Blog {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  title       String
  slug        String?
  content     String

  authorId    Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blogs")
}