// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String @unique
  password  String

  name        String?
  address     String?
  phoneNumber String?

  refreshToken String?

  roleId Int
  role Role @relation(fields: [roleId], references: [id])

  blogs Blog[]
  
  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  users User[]
  
  @@map("roles")
}

model ProductPrices {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String 
  description String?
  price Float
  discount Float?
  features String[]

  productId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("productPrices")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String
  name String 
  description String?
  price Float
  discount Float?
  features String[]

  productPrices ProductPrices[]

  @@map("products")
}

model Service {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String 
  description String?
  price Float
  discount Float?
  features String[]

  @@map("services")
}

model Blog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String 
  content String

  author Int
  user User @relation(fields: [author], references: [id], onDelete: Cascade)

  @@map("blogs")
}


